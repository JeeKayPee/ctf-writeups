package cz.vernjan.ctf.hv19

import kotlin.system.exitProcess


fun main() {

    val password = listOf<String>()

    //val data256 = listOf("🐇","🦁","🍟","🗞","🍰","📘","🥖","🖼","🚩","🥩","😵","⛺","❗","🥐","😀","🍉","🥞","🏁","👉","🧀","🍎","🍪","🚀","🙋","🏔","🍊","😛","🐔","🚇","🔷","🎶","📄","🍦","📩","🍋","💩","⁉","🍄","🥜","🦖","💣","🎄","🥨","📺","🥯","📽","🍖","🐠","📘","👄","🍔","🍕","🐖","🌭","🍷","🦑","🍴","⛪","🤧","🌟","🔓","🔥","🎁","🧦","🤬","🚲","🔔","🕯","🥶","❤","💎","📯","🎙","🎚","🎛","📻","📱","🔋","😈","🔌","💻","🐬","🖨","🖱","🖲","💾","💿","🧮","🎥","🎞","🔎","💡","🔦","🏮","📔","📖","🏙","😁","💤","👻","🛴","📙","📚","🥓","📓","🛩","📜","📰","😂","🍇","🚕","🔖","🏷","💰","⛴","💴","💸","🚁","🥶","💳","😎","🖍","🚎","🥳","📝","📁","🗂","🥴","📅","📇","📈","📉","📊","🔒","⛄","🌰","🕷","⏳","📗","🔨","🛠","🧲","🐧","🚑","🧪","🐋","🧬","🔬","🔭","📡","🤪","🚒","💉","💊","🛏","🛋","🚽","🚿","🧴","🧷","🍩","🧹","🧺","😺","🧻","🚚","🧯","😇","🚬","🗜","👽","🔗","🧰","🎿","🛷","🥌","🎯","🎱","🎮","🎰","🎲","🏎","🥵","🧩","🎭","🎨","🧵","🧶","🎼","🎤","🥁","🎬","🏹","🎓","🍾","💐","🍞","🔪","💥","🐉","🚛","🦕","🔐","🍗","🤠","🐳","🧫","🐟","🖥","🐡","🌼","🤢","🌷","🌍","🌈","✨","🎍","🌖","🤯","🐝","🦠","🦋","🤮","🌋","🏥","🏭","🗽","⛲","💯","🌁","🌃","🚌","📕","🚜","🛁","🛵","🚦","🚧","⛵","🛳","💺","🚠","🛰","🎆","🤕","💀","🤓","🤡","👺","🤖","👌","👎","🧠","👀","😴","🖤")
    //val map256 = data256.mapIndexed{ i, emoji -> emoji to i }.toMap()

    // flag
    //val data26 = listOf("🍴","🎙","🦖","📺","🍉","📘","🍖","📜","🔔","🌟","🦑","❤","💩","🔋","❤","🔔","🍉","📩","🎞","🏮","🌟","💾","⛪","📺","🥯","🥳")
    //val data26b = data26.mapIndexed { i, emoji -> map256.getValue(emoji) }
    //println(data26b)
    val data26 = listOf(56, 72, 39, 43, 15, 48, 46, 106, 66, 59, 55, 69, 35, 77, 69, 66, 15, 33, 89, 93, 59, 85, 57, 43, 44, 123)

    // password
    //val data8 = listOf("💐","🐡","🧰","🎲","🤓","🚚","🧩","🤡")
    //val data8b = data8.mapIndexed { i, emoji -> map256.getValue(emoji) }
    //println(data8b)
    val data8 = listOf(195, 209, 172, 180, 246, 165, 183, 247)
    data8.forEach{ println((it - 123))}



    val output = mutableListOf<String>()


    // ROUND 1: a: -56 == 195 -
    for (i in 0..7) {
        val flagChar = print(data8[i] - 'H'.toByte())
    }

//    for (i in 0..25) {
//        //val number = map256.getValue(data26[i])
//        val userInput = 5 % data8.size
//        val combined = (number - 256) / 2 * userInput * i
//
//        if (i < 8 && data8[i] - (( 26 + 26 - password.size - 8 + 1 ) * 3) == combined) {
//            exitProcess(1)
//        }
//    }

}
